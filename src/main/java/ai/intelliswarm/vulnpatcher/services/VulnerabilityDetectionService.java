package ai.intelliswarm.vulnpatcher.services;

import ai.intelliswarm.vulnpatcher.core.VulnerabilityDetectionEngine;
import ai.intelliswarm.vulnpatcher.models.ScanResult;
import io.quarkus.logging.Log;
import io.smallrye.mutiny.Uni;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;

import java.time.LocalDateTime;
import java.util.UUID;

@ApplicationScoped
public class VulnerabilityDetectionService {
    
    @Inject
    VulnerabilityDetectionEngine detectionEngine;
    
    public Uni<ScanResult> scanRepository(String repositoryUrl, String branch) {
        return Uni.createFrom().item(() -> {
            Log.info("Starting vulnerability scan for repository: " + repositoryUrl);
            
            ScanResult result = new ScanResult();
            result.setScanId(UUID.randomUUID().toString());
            result.setRepositoryUrl(repositoryUrl);
            result.setBranch(branch != null ? branch : "main");
            result.setScanDate(LocalDateTime.now());
            result.setStatus(ScanResult.ScanStatus.IN_PROGRESS);
            
            try {
                // Delegate to detection engine
                long startTime = System.currentTimeMillis();
                detectionEngine.scanRepository(repositoryUrl, result);
                
                result.setDuration(System.currentTimeMillis() - startTime);
                result.setStatus(ScanResult.ScanStatus.COMPLETED);
                result.setVulnerabilitiesFound(result.getVulnerabilities().size());
                
                Log.info("Scan completed. Found " + result.getVulnerabilitiesFound() + " vulnerabilities");
                
            } catch (Exception e) {
                Log.error("Scan failed", e);
                result.setStatus(ScanResult.ScanStatus.FAILED);
                throw new RuntimeException("Scan failed: " + e.getMessage(), e);
            }
            
            return result;
        });
    }
    
    public Uni<ScanResult> getScanResult(String scanId) {
        return Uni.createFrom().item(() -> {
            // In a real implementation, this would fetch from a database
            ScanResult result = new ScanResult();
            result.setScanId(scanId);
            result.setStatus(ScanResult.ScanStatus.COMPLETED);
            return result;
        });
    }
}