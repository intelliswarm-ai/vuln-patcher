name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  JAVA_VERSION: '17'
  QUARKUS_VERSION: '3.8.1'
  GRAALVM_VERSION: '22.3.0'

permissions:
  contents: read
  actions: read
  security-events: write

jobs:
  # Code quality and security checks
  code-quality:
    name: Code Quality & Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
        
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Cache SonarCloud packages
      uses: actions/cache@v4
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    
    - name: Run SpotBugs
      run: mvn com.github.spotbugs:spotbugs-maven-plugin:4.8.1.0:spotbugs || echo "SpotBugs analysis failed"
      continue-on-error: true
    
    - name: Run PMD
      run: mvn pmd:pmd pmd:cpd || echo "PMD analysis failed"
      continue-on-error: true
    
    - name: Run Checkstyle
      run: mvn checkstyle:checkstyle || echo "Checkstyle analysis failed"
      continue-on-error: true
    
    - name: SonarCloud Scan
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: |
        if [ -n "$SONAR_TOKEN" ]; then
          mvn verify sonar:sonar \
            -Dsonar.projectKey=intelliswarm_vuln-patcher \
            -Dsonar.organization=intelliswarm \
            -Dsonar.host.url=https://sonarcloud.io || echo "SonarCloud scan failed"
        else
          echo "SONAR_TOKEN not available, skipping SonarCloud scan"
        fi
      continue-on-error: true
    
    - name: Upload analysis reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: analysis-reports
        path: |
          target/spotbugs/
          target/pmd/
          target/checkstyle-result.xml

  # Security vulnerability scanning
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH,MEDIUM'
      continue-on-error: true
    
    - name: Upload Trivy scan results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      if: always()
      continue-on-error: true
    
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'vuln-patcher'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
      continue-on-error: true
    
    - name: Upload OWASP dependency check results
      uses: actions/upload-artifact@v4
      with:
        name: owasp-dependency-check-report
        path: reports/

  # Build and test
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest
    needs: [code-quality]
    if: always()
    
    strategy:
      matrix:
        java: [17, 21]
    
    steps:
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf "/usr/local/share/boost"
        sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h
        
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java }}
        distribution: 'temurin'
        cache: maven
    
    - name: Set environment for tests
      run: |
        echo "OLLAMA_BASE_URL=http://localhost:11434" >> $GITHUB_ENV
        echo "SKIP_OLLAMA_TESTS=true" >> $GITHUB_ENV
        echo "CI_ENVIRONMENT=true" >> $GITHUB_ENV
    
    - name: Build with Maven
      run: mvn clean compile
    
    - name: Run unit tests
      run: mvn test -Dtest="!*IntegrationTest"
    
    - name: Run integration tests
      run: mvn verify -Pit || echo "Integration tests failed - continuing"
      continue-on-error: true
    
    - name: Generate test report
      uses: dorny/test-reporter@v1
      if: success() || failure()
      with:
        name: Maven Tests - Java ${{ matrix.java }}
        path: target/surefire-reports/*.xml
        reporter: java-junit
    
    - name: Upload test coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        directory: ./target/site/jacoco/
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
      continue-on-error: true

  # Native build test
  native-build:
    name: Native Build with GraalVM
    runs-on: ubuntu-latest
    needs: [build-test]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up GraalVM
      uses: graalvm/setup-graalvm@v1
      with:
        java-version: ${{ env.JAVA_VERSION }}
        version: ${{ env.GRAALVM_VERSION }}
        components: 'native-image'
        cache: maven
    
    - name: Build native executable
      run: mvn package -Pnative -DskipTests || echo "Native build failed - continuing"
      continue-on-error: true
    
    - name: Test native executable
      run: |
        if [ -f "./target/vuln-patcher-1.0.0-SNAPSHOT-runner" ]; then
          ./target/vuln-patcher-1.0.0-SNAPSHOT-runner --version || echo "Native executable test failed"
        else
          echo "Native executable not found - skipping test"
        fi
      continue-on-error: true

  # Container build and scan
  container-build:
    name: Container Build and Security Scan
    runs-on: ubuntu-latest
    needs: [build-test, security-scan]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Build JAR
      run: mvn package -DskipTests
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build container image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./src/main/docker/Dockerfile.jvm
        push: false
        tags: vuln-patcher:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Run Trivy container scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: vuln-patcher:${{ github.sha }}
        format: 'sarif'
        output: 'container-scan-results.sarif'
    
    - name: Upload container scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'container-scan-results.sarif'

  # Performance tests
  performance-test:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [build-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Run JMH benchmarks
      run: |
        mvn clean compile
        mvn exec:java -Dexec.mainClass="ai.intelliswarm.vulnpatcher.benchmarks.BenchmarkRunner"
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: jmh-benchmark-results
        path: target/jmh-results.json

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-test, security-scan, native-build, container-build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Build release artifacts
      run: |
        mvn clean package -DskipTests
        mvn package -Pnative -DskipTests
    
    - name: Create release
      uses: actions/create-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false